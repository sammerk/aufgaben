[{"name":"app.R","content":"# Task Name: Messung_als_Homomorphismus ######################\nlibrary(shiny)\nlibrary(bslib)\nlibrary(shinyjs)\nlibrary(dplyr)\nlibrary(learnr)\nlibrary(shinycssloaders)\nlibrary(babynames)\n\n## UI #########################################################################\nui <- page_fixed(\n  useShinyjs(),\n    card(\n      card(\n        card_header(\n          \"Aufgabe: Homomorphismus\",\n          class = \"bg-dark\"),\n        card_body(\n          htmlOutput(\"prompt_task\"),\n          tableOutput(\"table\")\n        )\n      ),\n      \n      # komplett kopierbar für SC Aufgaben\n      shinyjs::hidden(card(id = \"feedbackpanel_task\",\n                           card_header(\n                             \"Feedback\",\n                             class = \"bg-dark\"),\n                           card_body(\n                             withSpinner(\n                               htmlOutput(\"feedback_task\"),\n                               proxy.height = \"50px\",\n                               color = \"#8cd000\"))\n      )\n      ),\n      card(\n        uiOutput(\"ui_answers_task\"),\n        actionButton(\"show_feedback_task\", \n                     \"Prüfe meine Lösung!\",\n                     icon = icon(\"microscope\")),\n        actionButton(\"reshuffle_task\", \n                     \"Diese Aufgabe wiederholen\",\n                     icon = icon(\"repeat\")),\n        actionButton(\"new_task\", \n                     \"Neue Aufgabe derselben Art\",\n                     icon = icon(\"plus-circle\"))\n      )      \n    ))\n  \nserver <- function(input, output, session) {\n  \n\n  ##############################################################################\n  # Backend for task  ##########################################################\n  ##############################################################################\n  \n  av <- reactive({\n    input$new_task\n    sample(c(\"des Geschlechts\", \n             \"der Grundschulempfehlung\"#, \n            # \"der Klausurleistung\"\n             ), \n           1)\n  })\n  \n  homomorphism_or_not <- reactive({\n    input$new_task\n    sample(c(\"homomorphism\", \"not_a_homomorphism\"), 1)\n    })\n  \n  output$table <- renderTable({\n    \n       ## Code for av() == \"der Grundschulempfehlung\"\n    if(av() == \"der Grundschulempfehlung\"){\n      list_of_distinct_codes <- sample(c(-100:100, \n                                         c(-100:100 + runif(201))), \n                                       prob = c(rep(1,201), rep(.1,201)),\n                                       size =1000,\n                                       replace = T) %>% \n        round(., 1) %>% \n        unique(.)\n      code_Werkrealschule <- sample(list_of_distinct_codes[list_of_distinct_codes < 75], 1) \n      code_Realschule <- code_Werkrealschule + sample(1:12, 1)\n      code_Gymnasium <- code_Realschule + sample(1:12, 1)\n      code_falsch <- sample(list_of_distinct_codes[list_of_distinct_codes > code_Realschule], 1) #später wird werkrea falsch\n      \n      data <- \n        babynames %>% \n        filter(prop >.01) %>% \n        slice_sample(n= 4) %>% \n        select(name, sex) %>% \n        mutate(`SchülerIn` = name,\n               Grundschulempfehlung = sample(c(\"Werkrealschule\", \"Realschule\", \"Gymnasium\"),\n                                             4, replace = T)) %>% \n        left_join(.,\n                  tibble(Grundschulempfehlung = c(\"Werkrealschule\", \"Realschule\", \"Gymnasium\"),\n                         Messwert = c(code_Werkrealschule, code_Realschule, code_Gymnasium))\n        )%>% \n        select(SchülerIn, Grundschulempfehlung, Messwert)\n      \n      if(homomorphism_or_not() == \"not_a_homomorphism\"){\n        data$Messwert[1] <- code_falsch\n        data <- \n          data %>% \n          slice_sample(n= 4)\n      }\n      \n    }\n    \n    ## Code for av() == \"der Klausurleistung\"\n    if(av() == \"der Klausurleistung\"){\n      vorkommende_messwerte <- sample(1:15, 4, replace = T)\n      potentielle_falsche_Messwerte <- -15:min(vorkommende_messwerte)\n      \n      data <- \n        babynames %>% \n        filter(prop >.01) %>% \n        slice_sample(n= 4) %>% \n        select(name, sex) %>% \n        mutate(`SchülerIn` = name,\n               `Notenpunkte (=Messwert)` = sample(1:15, 4, replace = T),\n               Verrechnungspunkte = `Notenpunkte (=Messwert)`* sample(2:5, 1))%>%\n        select(SchülerIn, Verrechnungspunkte, `Notenpunkte (=Messwert)`)\n      \n      if(homomorphism_or_not() == \"not_a_homomorphism\"){\n        data$`Notenpunkte (=Messwert)`[1] <- sample(potentielle_falsche_Messwerte, 1)\n        data <- \n          data %>% \n          slice_sample(n= 4)\n      }\n    }\n    \n    ## Code for av() == \"des Geschlechts\"\n    if(av() == \"des Geschlechts\"){\n      list_of_distinct_codes <- sample(c(-100:100, \n                                         c(-100:100 + runif(201))), \n                                       prob = c(rep(1,201), rep(.1,201)),\n                                       size =1000,\n                                       replace = T) %>% \n        round(., 1) %>% \n        unique(.)\n      code_m <- sample(list_of_distinct_codes, 1) \n      code_w <- sample(setdiff(list_of_distinct_codes, code_m), 1)\n      code_d <- sample(setdiff(list_of_distinct_codes, c(code_m, code_w)), 1)\n      \n      data <- \n        babynames %>% \n        filter(prop >.01 & sex == \"F\") %>% \n        slice_sample(n = 2) %>% \n        full_join(babynames %>% \n                    filter(prop >.01 & sex == \"M\") %>% \n                    slice_sample(n = 2)) |> \n        select(name, sex) %>% \n        mutate(`SchülerIn` = name,\n               Geschlecht = ifelse(sex == \"F\", \"weiblich\", \"männlich\")) %>% \n        left_join(.,\n                  tibble(Geschlecht = c(\"weiblich\", \"männlich\"),\n                         Messwert = c(code_w, code_m))) %>% \n       select(SchülerIn, Geschlecht, Messwert)\n      \n      if(homomorphism_or_not() == \"not_a_homomorphism\"){\n        data$Messwert[1] <- code_d\n        data <- \n          data %>% \n          slice_sample(n= 4)\n      }\n      \n    }\n    \n    return(data)\n  })\n  \n  ## Render UI for Answers ###\n  output$ui_answers_task <- renderUI({\n    input$reshuffle_task\n    input$new_task\n    radioButtons(\n      \"answers_task\",\n      \"Bitte ankreuzen\",\n      c(\"ja\", \"nein\"),\n      selected = character(0)\n    )\n  })\n  \n  ## Prompt task \n  output$prompt_task <- renderText({\n    paste(\"<b>Stellt die folgende Tabelle eine Messung im Sinne eines Homomorphismus dar?<\/b>\")\n  }) \n  \n  ## Correct answers ###\n  \n  \n  correct_answers_task <- reactive({\n    ifelse(homomorphism_or_not() == \"homomorphism\", \"ja\", \"nein\")\n  })\n  \n  ## Feedback task  ####\n  output$feedback_task <- renderText({   \n    \n    if(is.null(input$answers_task)){\n      HTML(paste(\"<b>Leider nicht korrekt!<\/b> Richtig wäre:  <br>✓ \", \n                 paste(correct_answers_task(), collapse = \", <br>✓ \"),\n                 \"<br><i>\",\n                 learnr::random_encouragement(),\n                 \"<\/i>\"))\n    }else{\n      if(setequal(correct_answers_task(), input$answers_task)){\n        paste(\"Richtig!\", learnr::random_praise())}else{\n          HTML(paste(\"<b>Leider nicht korrekt!<\/b> Richtig wäre:  <br>✓ \", \n                     paste(correct_answers_task(), collapse = \", <br>✓ \"),\n                     \"<br><i>\",\n                     learnr::random_encouragement(),\n                     \"<\/i>\"))\n        }\n    }\n  })\n  \n  \n  ## Show and Hide Feedback ####################################################\n  ## Show feedback on button click \n  observeEvent(input$show_feedback_task, {\n    showElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Hide feedback on solution change or new plot type\n  observeEvent(c(input$answers_task, input$new_task), {\n    hideElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Reset answer on new plot type\n  observeEvent(c(input$reshuffle_task, input$new_task), {\n    reset(id = \"answers_task\")\n  })\n  \n\n  \n  \n  ## Debug #############################################################\n  \n  output$debug <- renderPrint({\n   \n  })\n  \n  \n}\n\n\n# Create Shiny object\nshinyApp(ui = ui, server = server)\n","type":"text"}]
