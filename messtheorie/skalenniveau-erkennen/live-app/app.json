[{"name":"app.R","content":"# Task Name: Skalenniveau_erkennen ######################\nlibrary(shiny)\nlibrary(bslib)\nlibrary(shinyjs)\nlibrary(dplyr)\nlibrary(learnr)\nlibrary(shinycssloaders)\n\n## UI #########################################################################\nui <- page_fixed(\n  useShinyjs(),\n  card(\n    card(\n      card_header(\n        \"Aufgabe: Skalenniveau\",\n        class = \"bg-dark\"),\n      card_body(\n        htmlOutput(\"prompt_task\")\n      )\n    ),\n    \n    # komplett kopierbar für SC Aufgaben\n    shinyjs::hidden(card(id = \"feedbackpanel_task\",\n                         card_header(\n                           \"Feedback\",\n                           class = \"bg-dark\"),\n                         card_body(\n                           withSpinner(\n                             htmlOutput(\"feedback_task\"),\n                             proxy.height = \"50px\",\n                             color = \"#8cd000\"))\n    )\n    ),\n    card(\n      uiOutput(\"ui_answers_task\"),\n      actionButton(\"show_feedback_task\", \n                   \"Prüfe meine Lösung!\",\n                   icon = icon(\"microscope\")),\n      actionButton(\"reshuffle_task\", \n                   \"Diese Aufgabe wiederholen\",\n                   icon = icon(\"repeat\")),\n      actionButton(\"new_task\", \n                   \"Neue Aufgabe derselben Art\",\n                   icon = icon(\"plus-circle\"))\n    )      \n  ))\n\nserver <- function(input, output, session) {\n  \n \n  ## Parameter solution matrix for task  ####\n  q_a_matrix_qshuffeled <- \n    tibble(\n      Answers_and_Distractors = c(\"nominal skaliert\", \"ordinal skaliert\", \"intervallskaliert\"),\n      `Nationalität` = c(T,F,F), #1\n      `Religionszugehörigkeit` = c(T,F,F), #2\n      `Familienstand` = c(T,F,F), #3\n      `Postleitzahl` = c(T,F,F),\n      `Geschlecht` = c(T,F,F),\n      `Studiengang` = c(T,F,F),\n      `Geburtsort` = c(T,F,F),\n      `Lieblingsfach` = c(T,F,F), #9\n      `OlympischeMedaille` = c(F,T,F), #10\n      `Grundschulempfehlung` = c(F,T,F),\n      `Rangplatz im IQB-Ländervergleich` = c(F,T,F), #12\n      `Erreichte Notenpunkte in einer Oberstufenklausur` = c(F,F,T),\n      `Temperatur` = c(F,F,T),\n      `Gehalt` = c(F,F,T), #15\n      `Reaktionsgeschwindigkeit` = c(F,F,T),\n      `Fachsemester` = c(F,F,T),\n      `\"Dauer tgl.Internetnutzung` = c(F,F,T)) %>% \n    # shuffle order of questions\n    relocate(1, 2, sample(3:ncol(.), ncol(.) - 2))\n  \n  ## Number of \n  \n  ## Shuffle answers\n  q_a_matrix_qashuffeled <- \n    reactive({\n      input$reshuffle_task # answer shuffelling induced by both buttons\n      input$new_task\n      \n      q_a_matrix_qshuffeled %>%\n        sample_frac(., size = 1)\n    })\n  \n  ## Select task \n  nth_task <- reactive({\n    # starting with 1\n    (as.numeric(input$new_task) %% (ncol(q_a_matrix_qshuffeled) - 1)) + 1\n  })\n  \n  \n  ## Render UI for Answers ###\n  output$ui_answers_task <- renderUI({\n    input$reshuffle_task\n    input$new_task\n    radioButtons(\n      \"answers_task\",\n      \"Bitte ankreuzen\",\n      q_a_matrix_qashuffeled() %>% \n        select(1, nth_task() + 1) %>% \n        na.omit(.) %>% \n        pull(Answers_and_Distractors),\n      selected = character(0)\n    )\n  })\n  \n  ## Prompt task \n  output$prompt_task <- renderText({\n    paste(\"<b>Welches Skalenniveau sollte der folgenden Variable sinnvollerweise zugeschrieben werden?<\/b>\",\n          names(q_a_matrix_qashuffeled())[2:ncol(q_a_matrix_qshuffeled)][nth_task()])\n  }) \n  \n  ## Correct answers ###\n  correct_answers_task <- reactive({\n    \n    vector_of_correct_answers <- \n      q_a_matrix_qashuffeled() %>% \n      pull(nth_task() + 1)\n    \n    correct_answers_task <- \n      q_a_matrix_qashuffeled() %>%\n      filter(vector_of_correct_answers == T) %>%\n      pull(Answers_and_Distractors)\n    \n    return(correct_answers_task)\n  })\n  \n  ## Feedback task  ####\n  output$feedback_task <- renderText({   \n    \n    if(is.null(input$answers_task)){\n      HTML(paste(\"<b>Leider nicht korrekt!<\/b> Richtig wäre:  <br>✓ \", \n                 paste(correct_answers_task(), collapse = \", <br>✓ \"),\n                 \"<br><i>\",\n                 learnr::random_encouragement(),\n                 \"<\/i>\"))\n    }else{\n      if(setequal(correct_answers_task(), input$answers_task)){\n        paste(\"Richtig!\", learnr::random_praise())}else{\n          HTML(paste(\"<b>Leider nicht korrekt!<\/b> Richtig wäre:  <br>✓ \", \n                     paste(correct_answers_task(), collapse = \", <br>✓ \"),\n                     \"<br><i>\",\n                     learnr::random_encouragement(),\n                     \"<\/i>\"))\n        }\n    }\n  })\n  \n  ## Show and Hide Feedback ####################################################\n  ## Show feedback on button click \n  observeEvent(input$show_feedback_task, {\n    showElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Hide feedback on solution change or new plot type\n  observeEvent(c(input$answers_task, input$new_task), {\n    hideElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Reset answer on new plot type\n  observeEvent(c(input$reshuffle_task, input$new_task), {\n    reset(id = \"answers_task\")\n  })\n}\n\n\n# Create Shiny object\nshinyApp(ui = ui, server = server)\n","type":"text"}]
