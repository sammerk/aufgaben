[{"name":"app.R","content":"# Task Name: av-identifizieren ######################\nlibrary(shiny)\nlibrary(bslib)\nlibrary(shinyjs)\nlibrary(dplyr)\nlibrary(learnr)\nlibrary(shinycssloaders)\n\n## UI #########################################################################\nui <- page_fixed(\n  useShinyjs(),\n  card(\n    card(\n      card_header(\n        \"Aufgabe: Kausalzusammenhang\",\n        class = \"bg-dark\"),\n      card_body(\n        htmlOutput(\"prompt_task\")\n      )\n    ),\n    shinyjs::hidden(card(id = \"feedbackpanel_task\",\n                         card_header(\n                           \"Feedback\",\n                           class = \"bg-dark\"),\n                         card_body(\n                           withSpinner(\n                             htmlOutput(\"feedback_task\"),\n                             proxy.height = \"50px\",\n                             color = \"#8cd000\"))\n    )\n    ),\n    card(\n      uiOutput(\"ui_answers_task\"),\n      actionButton(\"show_feedback_task\", \n                   \"Prüfe meine Lösung!\",\n                   icon = icon(\"microscope\")),\n      actionButton(\"reshuffle_task\", \n                   \"Diese Aufgabe wiederholen\",\n                   icon = icon(\"repeat\")),\n      actionButton(\"new_task\", \n                   \"Neue Aufgabe derselben Art\",\n                   icon = icon(\"plus-circle\"))\n    )      \n  ))\n\n\n\nserver <- function(input, output, session) {\n  \n  # Global functions ###########################################################\n  ## round2 rounds .5 upwards\n  round2 = function(x, n) {\n    posneg = sign(x)\n    z = abs(x)*10^n\n    z = z + 0.5 + sqrt(.Machine$double.eps)\n    z = trunc(z)\n    z = z/10^n\n    z*posneg\n  }\n\n  ##############################################################################\n  # Backend for task  ##########################################################\n  ##############################################################################\n  \n  # The global logic is to create a tibble containing  \n  #      - answers & distractors (column 1)\n  #      - questions (headers of columns 2 - m)\n  #      - correct solutions (columns 2 - m without headers)\n  #\n  # Then \n  #     - reshuffle columns (without the first) to randomize order of questions\n  #     - reshuffle rows to randomize order of answers & distractors\n  \n  \n  ## Parameter solution matrix for task  ####\n  variables <- reactive({\n    tibble::tribble(\n    ~Topic,                               ~MV,                             ~IV,                               ~DV,\n    1L,           \"Kognitive Fähigkeiten\",            \"Gewissenhaftigkeit\", \"Schulische Leistungsentwicklung\",\n    2L,                           \"Alter\",             \"Menge an Freizeit\",         \"Nutzung sozialer Medien\",\n    3L,     \"Motivation der Studierenden\",       \"Anspruch eines Seminars\",          \"Bewertung des Seminars\",\n    4L,                           \"Alter\",           \"Verbale Intelligenz\",              \"Gedächtnisleistung\",\n    5L,                     \"Straßenlärm\", \"Dosierung eines Schlafmittels\",                     \"Schlafdauer\",\n    6L, \"Einsatz von Entspannungstechnik\",         \"Aufgewendete Lernzeit\",                      \"Lernerfolg\",\n    7L,                   \"Alkoholkonsum\",         \"Aufgewendete Lernzeit\",                      \"Lernerfolg\",\n    8L,           \"Soziale Unterstützung\",     \"Individueller Stresslevel\",                  \"Lebensqualität\"#,\n    #9L,                      \"Geschlecht\",              \"Arbeitserfahrung\",                          \"Gehalt\"\n  )[c(1, sample(2:8,7)),] # reshuffle tasks except the first\n  })\n  \n  # manually set the topic to be used in the task\n  topic_manually_set <- reactive({\n    (as.numeric(input$new_task) %% (9 - 1)) + 1\n  })\n  \n  # set modality of solution manually\n  solution_mode_manually_set <- \"verbally\"\n  \n  # (random) sequence of the mentioning of the three variables within the topic \n  mv_iv_dv_seq <- 1:3 #sample(1:3,3)\n  \n  # generate the question string to alternate wordings \n  question_string_part1 <- \n    reactive({\n    paste(\"Eine Forscherin interessiert sich für die Variablen »\",\n          variables() %>% \n            slice(., topic_manually_set()) %>% \n            pull(1 + mv_iv_dv_seq[1]),\n          \" (\",\n          substr(\n            variables() %>% \n              slice(., topic_manually_set()) %>% \n              pull(1 + mv_iv_dv_seq[1]), \n            1,2),\n          \")«, »\",\n          variables() %>% \n            slice(., topic_manually_set()) %>% \n            pull(1 + mv_iv_dv_seq[2]),\n          \" (\",\n          substr(\n            variables() %>% \n              slice(., topic_manually_set()) %>% \n              pull(1 + mv_iv_dv_seq[2]), \n            1,2),\n          \")« und »\",\n          variables() %>% \n            slice(., topic_manually_set()) %>% \n            pull(1 + mv_iv_dv_seq[3]),\n          \" (\",\n          substr(\n            variables() %>% \n              slice(., topic_manually_set()) %>% \n              pull(1 + mv_iv_dv_seq[3]), \n            1,2),\n          \")«. Sie erhebt die entsprechenden Daten bei einer repräsentativen Stichprobe von \",\n          sample(501:7654, 1),\n          \" SchülerInnen.\", \n          sep = \"\"\n    )\n      })\n  \n  question_string_part2 <- reactive({\n    sample(c(\n      paste(\n        \" Sie vermutet dabei folgendes: Je niedriger die Variable »\",\n        variables() %>% slice(.,topic_manually_set()) %>% pull(MV),\n        \"« ausgeprägt ist, desto größer ist der Effekt der Variable »\",\n        variables() %>% slice(.,topic_manually_set()) %>% pull(IV),\n        \"« auf die Variable »\",\n        variables() %>% slice(.,topic_manually_set()) %>% pull(DV),\n        \"«.\",\n        sep = \"\"\n      ),\n      paste(\n        \" Sie vermutet dabei, dass der Effekt der Variable »\",\n        variables() %>% slice(.,topic_manually_set()) %>% pull(IV),\n        \"« auf die Variable »\",\n        variables() %>% slice(.,topic_manually_set()) %>% pull(DV),\n        \"« umso kleiner ist, je kleiner die Variable »\",\n        variables() %>% slice(.,topic_manually_set()) %>% pull(MV),\n        \"« ausgeprägt ist.\",\n        sep = \"\"\n      ),\n      paste(\n        \" Sie vermutet dabei, dass der Effekt der Variable »\",\n        variables() %>% slice(.,topic_manually_set()) %>% pull(IV),\n        \"« auf die Variable »\",\n        variables() %>% slice(.,topic_manually_set()) %>% pull(DV),\n        \"« von der Ausprägung der Variable »\",\n        variables() %>% slice(.,topic_manually_set()) %>% pull(MV),\n        \"« beinflusst wird.\",\n        sep = \"\"\n      )),\n      1\n    )\n  })\n  \n  ## generating verbal solution\n  \n  list_of_answers <- reactive({\n    c(variables() %>% slice(., topic_manually_set()) %>% pull(DV),\n      variables() %>% slice(., topic_manually_set()) %>% pull(IV),\n      variables() %>% slice(., topic_manually_set()) %>% pull(MV))\n  })\n  \n  ## Render UI for Answers ###\n  output$ui_answers_task <- renderUI({\n    input$reshuffle_task\n    input$new_task\n    radioButtons(\n      \"answers_task\",\n      \"Bitte ankreuzen\",\n      list_of_answers()[answersequence()],\n      selected = character(0),\n      width = \"100%\"\n    )\n  })\n  \n  ## Prompt task \n  output$prompt_task <- renderText({\n    paste(question_string_part1(), \n          question_string_part2(),\n          \"<i>Welche Variable stellt die abhängige Variable dar?<\/i>\")\n  }) \n  \n  ## Correct answers ###\n  \n  # String to resort answers\n  \n  answersequence <- reactive({\n    input$new_task\n    sample(1:3, 3)\n  })\n  \n  correct_answers_task <- reactive({\n    list_of_answers()[1]\n  })\n  \n  ## Feedback task  ####\n  output$feedback_task <- renderText({   \n    \n    if(is.null(input$answers_task)){\n      HTML(paste(\"<b>Leider nicht korrekt!<\/b> Richtig wäre:  <br>✓ \", \n                 paste(correct_answers_task(), collapse = \", <br>✓ \"),\n                 \"<br><i>\",\n                 learnr::random_encouragement(),\n                 \"<\/i>\"))\n    }else{\n      if(setequal(correct_answers_task(), input$answers_task)){\n        paste(\"Richtig!\", learnr::random_praise())}else{\n          HTML(paste(\"<b>Leider nicht korrekt!<\/b> Richtig wäre:  <br>✓ \", \n                     paste(correct_answers_task(), collapse = \", <br>✓ \"),\n                     \"<br><i>\",\n                     learnr::random_encouragement(),\n                     \"<\/i>\"))\n        }\n    }\n  })\n  \n  \n  ## Show and Hide Feedback ####################################################\n  ## Show feedback on button click \n  observeEvent(input$show_feedback_task, {\n    showElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Hide feedback on solution change or new plot type\n  observeEvent(c(input$answers_task, input$new_task), {\n    hideElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Reset answer on new plot type\n  observeEvent(c(input$reshuffle_task, input$new_task), {\n    reset(id = \"answers_task\")\n  })\n\n  \n  \n  ## Debug #############################################################\n  \n  output$debug <- renderPrint({\n    class(question_string_part1())\n  })\n  \n  \n}\n\n\n# Create Shiny object\nshinyApp(ui = ui, server = server)\n","type":"text"}]
