[{"name":"app.R","content":"# Task Name: steigerung-externe-validität ######################\nlibrary(shiny)\nlibrary(bslib)\nlibrary(shinyjs)\nlibrary(dplyr)\nlibrary(learnr)\nlibrary(shinycssloaders)\n\n## UI #########################################################################\nui <- page_fixed(\n  useShinyjs(),\n  card(\n    card(\n      card_header(\n        \"Aufgabe: Steigerung der externen Validität\",\n      class = \"bg-dark\"),\n    card_body(\n      HTML('Eine Forscherin untersucht, ob die Verwendung dynamischer Geometriesoftware (z.B. GeoGebra) den Erwerb von konzeptuellem Wissen fördert. Dazu erfasst sie Schülerleistungen der 7. Klasse N = 63 anhand eines entsprechenden Tests nach der Durchführung der Unterrichtseinheit zum \"Satz vom Umkreis\" bei Lehrerinnen, die entweder mit oder ohne die dynamische Geometriesoftware arbeiten und über diesen Einsatz auch selbst entscheiden konnten. Es konnte ein statistisch bedeutsamer Unterschied zugunsten der Lernenden, die GeoGebra genutzt haben, nachgewiesen werden.\nEine Forschergruppe möchte sich die Vorteile der Verwendung von dynamischer Geometriesoftware genauer anschauen. Sie nutzt diese Studie als Grundlage für weitere Forschungsbemühungen. Sie will jedoch die externe Validität erhöhen. Ist die folgende Maßnahme hierzu zielführend?')\n      ),\n      htmlOutput(\"prompt_task\")\n    ),\n  shinyjs::hidden(card(id = \"feedbackpanel_task\",\n                       card_header(\n                         \"Feedback\",\n                         class = \"bg-dark\"),\n                       card_body(\n                         withSpinner(\n                           htmlOutput(\"feedback_task\"),\n                           proxy.height = \"50px\",\n                           color = \"#8cd000\"))\n  )\n  ),\n  card(\n    uiOutput(\"ui_answers_task\"),\n    actionButton(\"show_feedback_task\", \n                 \"Prüfe meine Lösung!\",\n                 icon = icon(\"microscope\")),\n    actionButton(\"reshuffle_task\", \n                 \"Diese Aufgabe wiederholen\",\n                 icon = icon(\"repeat\")),\n    actionButton(\"new_task\", \n                 \"Neue Aufgabe derselben Art\",\n                 icon = icon(\"plus-circle\"))\n  )      \n))\n\n\n\n\nserver <- function(input, output, session) {\n  \n  # Global functions ###########################################################\n  ## round2 rounds .5 upwards\n  round2 = function(x, n) {\n    posneg = sign(x)\n    z = abs(x)*10^n\n    z = z + 0.5 + sqrt(.Machine$double.eps)\n    z = trunc(z)\n    z = z/10^n\n    z*posneg\n  }\n\n  ##############################################################################\n  # Backend for task  ##########################################################\n  ##############################################################################\n  \n  # The global logic is to create a tibble containing  \n  #      - answers & distractors (column 1)\n  #      - questions (headers of columns 2 - m)\n  #      - correct solutions (columns 2 - m without headers)\n  #\n  # Then \n  #     - reshuffle columns (without the first) to randomize order of questions\n  #     - reshuffle rows to randomize order of answers & distractors\n  \n  \n  ## Parameter solution matrix for task  ####\n  q_a_matrix_qshuffeled <- \n    tibble(\n      Answers_and_Distractors = c(\"zielführend\",\n                                  \"nicht zielführend\"),\n      `Erhöhung der Stichprobengröße` =  c(T,F), # adjust line 132 if coded 0/1 #1\n      `Wahl eines experimentellen Forschungsdesigns` =  c(F,T), #2\n      `Randomisierte Zuteilung der Teilnehmenden zu Lehrer*innen mit und ohne Nutzung der dynamischen Geometriesoftware` =  c(F,T),#3\n      `Alle Mädchen mit GeoGebra unterrichten und alle Jungen ohne` =  c(F,T), #4\n      `Kontrolle von Störvariablen, wie Vorwissen der Schüler*innen` =  c(F,T),#5\n      `Die Studie im Labor durchführen` =  c(F,T),#6\n      `Untersuchung bei Studierenden oder anderen Klassenstufen planen` =  c(T,F),) %>% #7\n    # shuffle order of questions\n    relocate(1, 2, sample(3:ncol(.), ncol(.) - 2))\n  \n  ## Number of \n  \n  ## Shuffle answers\n  q_a_matrix_qashuffeled <- \n    reactive({\n      input$reshuffle_task # answer shuffelling induced by both buttons\n      input$new_task\n      \n      q_a_matrix_qshuffeled %>%\n        sample_frac(., size = 1)\n    })\n  \n  ## Select task \n  nth_task <- reactive({\n    # starting with 1\n    (as.numeric(input$new_task) %% (ncol(q_a_matrix_qshuffeled) - 1)) + 1\n  })\n  \n  \n  ## Render UI for Answers ###\n  output$ui_answers_task <- renderUI({\n    input$reshuffle_task\n    input$new_task\n    radioButtons(\n      \"answers_task\",\n      \"Bitte ankreuzen\",\n      q_a_matrix_qashuffeled() %>% \n        select(1, nth_task() + 1) %>% \n        na.omit(.) %>% \n        pull(Answers_and_Distractors),\n      selected = character(0)\n    )\n  })\n  \n  ## Prompt task \n  output$prompt_task <- renderText({\n    paste(\"<b>\",\n          names(q_a_matrix_qashuffeled())[2:ncol(q_a_matrix_qshuffeled)][nth_task()],\n          \"<\/b>\")\n  }) \n  \n  ## Correct answers ###\n  correct_answers_task <- reactive({\n    \n    vector_of_correct_answers <- \n      q_a_matrix_qashuffeled() %>% \n      pull(nth_task() + 1)\n    \n    correct_answers_task <- \n      q_a_matrix_qashuffeled() %>%\n      filter(vector_of_correct_answers == T) %>%\n      pull(Answers_and_Distractors)\n    \n    return(correct_answers_task)\n  })\n  \n  ## Feedback task  ####\n  output$feedback_task <- renderText({   \n    \n    if(is.null(input$answers_task)){\n      HTML(paste(\"<b>Leider nicht korrekt!<\/b> Richtig wäre:  <br>✓ \", \n                 paste(correct_answers_task(), collapse = \", <br>✓ \"),\n                 \"<br><i>\",\n                 learnr::random_encouragement(),\n                 \"<\/i>\"))\n    }else{\n      if(setequal(correct_answers_task(), input$answers_task)){\n        paste(\"Richtig!\", learnr::random_praise())}else{\n          HTML(paste(\"<b>Leider nicht korrekt!<\/b> Richtig wäre:  <br>✓ \", \n                     paste(correct_answers_task(), collapse = \", <br>✓ \"),\n                     \"<br><i>\",\n                     learnr::random_encouragement(),\n                     \"<\/i>\"))\n        }\n    }\n  })\n  \n  ## Show and Hide Feedback ####################################################\n  ## Show feedback on button click \n  observeEvent(input$show_feedback_task, {\n    showElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Hide feedback on solution change or new plot type\n  observeEvent(c(input$answers_task, input$new_task), {\n    hideElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Reset answer on new plot type\n  observeEvent(c(input$reshuffle_task, input$new_task), {\n    reset(id = \"answers_task\")\n  })\n\n  \n  ## URL Variable fetching #####################################################\n  url_vars <- reactive({\n    parseQueryString(session$clientData$url_search)\n  })\n  \n  ## Usage Logging #############################################################\n  observeEvent(input$show_feedback_task, {\n    if(!is.null(input$answers_task)){\n      sheet_append(\"1AZf7EQk-M2Wgej3WJXG1J2xRdql8b7Xiq0SvIiZogUo\",\n                   tibble(PID = ifelse(is.null(url_vars()$PID), \n                                       \"PID is missing\", #to keep ncol constant\n                                       url_vars()$PID), # Person identifier from URL\n                          task_name = \"Steigerung_externe_Validitaet\",\n                          task_version = \"repeatable_and_parametrized\",\n                          time = Sys.time(),\n                          timezone = Sys.timezone(),\n                          result = # correct or wrong sol. provided by student\n                            case_when(is.null(input$answers_task) ~ \n                                        \"false_solution\",\n                                      setequal(correct_answers_task(), \n                                               input$answers_task) ~ \n                                        \"correct_solution\",\n                                      TRUE ~  \"false_solution\")\n                   ),\n                   sheet = 1)\n    }\n  })\n}\n\n\n# Create Shiny object\nshinyApp(ui = ui, server = server)\n","type":"text"}]
